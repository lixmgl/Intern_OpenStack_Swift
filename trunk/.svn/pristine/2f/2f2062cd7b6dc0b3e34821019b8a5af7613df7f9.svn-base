/*
 * POSTGRESQL DATABASE SCHEMA FOR THE M/MONIT DATABASE.
 *
 * To create the database: 
 * 1) Create a mmonit postgres user: createuser -U postgres -P mmonit
 * 2) Create the mmonit database: createdb -U postgres -E utf8 -O mmonit mmonit
 * 3) Create the schema: psql -U mmonit mmonit < mmonit-schema.postgresql
 */


/* ---------------------------------------------------- M/Monit system table */


CREATE TABLE mmonit (
  schemaversion INTEGER NOT NULL
);


/* -------------------------------------------------------------- Name table */


CREATE TABLE name (
  id SERIAL PRIMARY KEY,
  name CHARACTER VARYING(255) NOT NULL,
  CONSTRAINT name_name_unique UNIQUE (name)
);
CREATE INDEX name_index ON name (name);


/* ------------------------------------------------------------- User tables */


CREATE TABLE users (
  uname CHARACTER VARYING(20) PRIMARY KEY,
  password CHARACTER VARYING(56) NOT NULL,
  fullname CHARACTER VARYING(255),
  title CHARACTER VARYING(255),
  email CHARACTER VARYING(255),
  phone CHARACTER VARYING(40),
  mobile CHARACTER VARYING(40),
  imname CHARACTER VARYING(255),
  imtype CHARACTER VARYING(20),
  refresh INTEGER DEFAULT 5000
);


CREATE TABLE roles (
  role CHARACTER VARYING(20) PRIMARY KEY,
  description CHARACTER VARYING(255)
);


CREATE TABLE userroles (
  uname CHARACTER VARYING(20) NOT NULL,
  role CHARACTER VARYING(20) NOT NULL,
  PRIMARY KEY(role, uname),
  CONSTRAINT role_fk FOREIGN KEY(role) REFERENCES roles(role) MATCH FULL ON DELETE CASCADE,
  CONSTRAINT uname_fk FOREIGN KEY(uname) REFERENCES users(uname) MATCH FULL ON DELETE CASCADE
);


/* ------------------------------------------------------------- Host tables */


CREATE TABLE host (
  id SERIAL PRIMARY KEY,
  status INTEGER NOT NULL,
  nameid INTEGER NOT NULL,
  monitid CHARACTER VARYING(255) NOT NULL,
  ipaddrin CHARACTER VARYING(255) NOT NULL,
  ipaddrout CHARACTER VARYING(255),
  portin INTEGER,
  portout INTEGER DEFAULT -1,
  uname CHARACTER VARYING(255),
  password CHARACTER VARYING(255),
  usessl SMALLINT,
  description TEXT,
  poll INTEGER DEFAULT 0,
  statusmodified INTEGER,
  servicemodified INTEGER DEFAULT 0,
  serviceskew INTEGER DEFAULT 3,
  serviceup INTEGER DEFAULT 0,
  servicedown INTEGER DEFAULT 0,
  serviceunmonitorauto INTEGER,
  serviceunmonitormanual INTEGER,
  version CHARACTER VARYING(20),
  platformname CHARACTER VARYING(255),
  platformrelease CHARACTER VARYING(255),
  platformversion CHARACTER VARYING(255),
  platformmachine CHARACTER VARYING(255),
  platformcpu INTEGER DEFAULT 0,
  platformmemory INTEGER DEFAULT 0,
  platformswap INTEGER DEFAULT 0,
  cpuuser REAL DEFAULT 0,
  cpusystem REAL DEFAULT 0,
  cpuwait REAL DEFAULT 0,
  cputotal REAL DEFAULT 0,
  memory REAL DEFAULT 0,
  swap REAL DEFAULT 0,
  statusheartbeat SMALLINT DEFAULT 1,
  eventscount INTEGER DEFAULT 0,
  CONSTRAINT host_monitid_unique UNIQUE (monitid),
  CONSTRAINT nameid_fk FOREIGN KEY(nameid) REFERENCES name(id) MATCH FULL ON DELETE CASCADE
);


CREATE TABLE hostgroup (
  id SERIAL PRIMARY KEY,
  nameid INTEGER NOT NULL,
  description TEXT,
  CONSTRAINT hostgroup_nameid_unique UNIQUE (nameid),
  CONSTRAINT nameid_fk FOREIGN KEY(nameid) REFERENCES name(id) MATCH FULL ON DELETE CASCADE
);


CREATE TABLE groupedhost (
  groupid SERIAL,
  hostid INTEGER NOT NULL,
  PRIMARY KEY(groupid, hostid),
  CONSTRAINT groupid_fk FOREIGN KEY(groupid) REFERENCES hostgroup(id) MATCH FULL ON DELETE CASCADE,
  CONSTRAINT hostid_fk FOREIGN KEY(hostid) REFERENCES host(id) MATCH FULL ON DELETE CASCADE
);


/* ---------------------------------------------------------- Service tables */


CREATE TABLE service (
  id SERIAL PRIMARY KEY,
  nameid INTEGER NOT NULL,
  hostid INTEGER NOT NULL,
  type INTEGER NOT NULL,
  status INTEGER NOT NULL,
  monitoringstate INTEGER NOT NULL,
  monitoringmode INTEGER NOT NULL,
  statusmodified INTEGER DEFAULT 0,
  eventscount INTEGER DEFAULT 0,
  CONSTRAINT nameid_fk FOREIGN KEY (nameid) REFERENCES name (id) MATCH FULL ON DELETE CASCADE
);


CREATE TABLE servicegroup (
  id SERIAL PRIMARY KEY,
  nameid INTEGER NOT NULL,
  hostid INTEGER NOT NULL,
  CONSTRAINT nameid_fk FOREIGN KEY (nameid) REFERENCES name (id) MATCH FULL ON DELETE CASCADE
);


CREATE TABLE groupedservices (
  servicegroupid INTEGER NOT NULL,
  service_nameid INTEGER NOT NULL,
  PRIMARY KEY(servicegroupid, service_nameid),
  CONSTRAINT servicegroupid_fk FOREIGN KEY (servicegroupid) REFERENCES servicegroup (id) MATCH FULL ON DELETE CASCADE,
  CONSTRAINT service_nameid_fk FOREIGN KEY (service_nameid) REFERENCES name (id) MATCH FULL ON DELETE CASCADE
);


/* ------------------------------------------------------------ Event tables */


CREATE TABLE event (
  id BIGSERIAL PRIMARY KEY,
  hostid INTEGER NOT NULL,
  collectedsec INTEGER NOT NULL,
  collectedusec INTEGER NOT NULL,
  service_nameid INTEGER NOT NULL,
  servicetype INTEGER NOT NULL,
  event INTEGER NOT NULL,
  state INTEGER NOT NULL,
  action INTEGER NOT NULL,
  message TEXT NOT NULL,
  hasnotice INTEGER,
  CONSTRAINT hostid_fk FOREIGN KEY (hostid) REFERENCES host (id) MATCH FULL ON DELETE CASCADE,
  CONSTRAINT service_nameid_fk FOREIGN KEY (service_nameid) REFERENCES name (id) MATCH FULL ON DELETE CASCADE
);
CREATE INDEX hostid_index ON event (hostid);
CREATE INDEX collectedsec_index ON event(collectedsec);
CREATE INDEX service_nameid_index ON event(service_nameid);
CREATE INDEX servicetype_index ON event (servicetype);
CREATE INDEX state_index ON event (state);


CREATE TABLE eventnotice (
  eventid INTEGER NOT NULL,
  date INTEGER NOT NULL,
  uname CHARACTER VARYING(20) NOT NULL,
  notice TEXT NOT NULL,
  CONSTRAINT eventid_fk FOREIGN KEY (eventid) REFERENCES event (id) MATCH FULL ON DELETE CASCADE,
  CONSTRAINT uname_fk FOREIGN KEY (uname) REFERENCES users (uname) MATCH FULL ON DELETE CASCADE
);
CREATE INDEX eventid_index ON eventnotice (eventid);


/* ------------------------------------------------------------- Rule tables */


CREATE TABLE rule (
  id SERIAL PRIMARY KEY,
  description CHARACTER VARYING(255),
  active SMALLINT,
  operator INTEGER DEFAULT 0
);
CREATE INDEX active_index ON rule (active);


CREATE TABLE rulerow (
  id SERIAL PRIMARY KEY,
  ruleid INTEGER NOT NULL,
  hostid INTEGER DEFAULT (-1),
  hostgroupid INTEGER DEFAULT (-1),
  service_nameid INTEGER DEFAULT (-1),
  servicegroup_nameid INTEGER DEFAULT (-1),
  eventstate INTEGER DEFAULT (-1),
  CONSTRAINT ruleid_fk FOREIGN KEY(ruleid) REFERENCES rule(id) MATCH FULL ON DELETE CASCADE
);


CREATE TABLE actionrow (
  id SERIAL PRIMARY KEY,
  ruleid INTEGER NOT NULL,
  selectedtarget INTEGER NOT NULL,
  target TEXT NOT NULL,
  targetoption TEXT,
  CONSTRAINT ruleid_fk FOREIGN KEY(ruleid) REFERENCES rule(id) MATCH FULL ON DELETE CASCADE
);


/* ----------------------------------------------------- Notification tables */


CREATE TABLE mailserver (
  id SERIAL PRIMARY KEY,
  hostname CHARACTER VARYING(255) NOT NULL,
  port INTEGER NOT NULL,
  uname CHARACTER VARYING(255),
  password CHARACTER VARYING(255),
  usessl SMALLINT,
  isdefault SMALLINT
);


CREATE TABLE jabberserver (
  id SERIAL PRIMARY KEY,
  hostname CHARACTER VARYING(255) NOT NULL,
  port INTEGER NOT NULL,
  uname CHARACTER VARYING(255),
  password CHARACTER VARYING(255),
  isdefault SMALLINT
);


CREATE TABLE messageformat (
  id SERIAL PRIMARY KEY,
  description CHARACTER VARYING(255),
  sender CHARACTER VARYING(255),
  subject CHARACTER VARYING(255),
  message TEXT,
  isdefault SMALLINT
);


CREATE TABLE messagequeue (
  deferredsize INTEGER,
  retry INTEGER,
  minbackoff INTEGER,
  maxbackoff INTEGER,
  flush INTEGER
);


/* ----------------------------------- Persistent Alert message queue tables */


CREATE TABLE message (
  id SERIAL PRIMARY KEY,
  type INTEGER,
  sender CHARACTER VARYING(255),
  subject CHARACTER VARYING(255),
  body TEXT,
  created INTEGER,
  retry INTEGER
);


CREATE TABLE messagerecipients (
  messageid INTEGER NOT NULL,
  recipient CHARACTER VARYING(255) NOT NULL,
  CONSTRAINT message_fk FOREIGN KEY(messageid) REFERENCES message(id) MATCH FULL ON DELETE CASCADE
);


/* ----------------------------------------------- Persistent SESSION tables */


CREATE TABLE session (
  id CHARACTER VARYING(65) PRIMARY KEY,
  context CHARACTER VARYING(255) NOT NULL,
  ctime INTEGER NOT NULL,
  atime INTEGER NOT NULL,
  itime INTEGER NOT NULL,
  authtype CHARACTER VARYING(20),
  principal CHARACTER VARYING(255),
  data BYTEA
);


/* ------------------------------------------------------------ Initial Data */


/*
 * Populating with standard values
 */

INSERT INTO mmonit (schemaversion) VALUES (6);

INSERT INTO roles VALUES ('admin', 'The administrator role');
INSERT INTO roles VALUES ('monit', 'The standard user role');
INSERT INTO users (uname, password, fullname) VALUES ('admin', '15B29FFDCE66E10527A65BC6D71AD94D', 'The Administrator User');
INSERT INTO users (uname, password, fullname) VALUES ('monit', 'D9CFD4AF77E33817DE2160E0C1C7607C', 'Default user');
INSERT INTO userroles VALUES ('admin', 'admin');
INSERT INTO userroles VALUES ('admin', 'monit');
INSERT INTO userroles VALUES ('monit', 'monit');
INSERT INTO messageformat (description, sender, subject, message, isdefault) VALUES('Default', 'mmonit@$HOST', '$HOST: $EVENT $SERVICE ($DATE)', '$EVENT Service $SERVICE

Date:        $DATE
Action:      $ACTION
Host:        $HOST
Description: $DESCRIPTION

Your faithful employee,
M/Monit', 1);
INSERT INTO messagequeue (deferredsize, retry, minbackoff, maxbackoff, flush) VALUES(100, 10, 60, 3600, 30);


